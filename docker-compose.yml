services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: stock_data
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d stock_data"]
      interval: 30s
      timeout: 10s
      retries: 3

  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password123
      DOCKER_INFLUXDB_INIT_ORG: test
      DOCKER_INFLUXDB_INIT_BUCKET: test
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: A0aZWRsN3R4CGDlh0pV-Zv_n0yABGiVgufZaFzBWlL29FBtQTpOzXtvygZrJdHkzMz7aBccfy-ATZCF-wcgLUQ==


  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.40.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana

  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_SERVERS: kafka:29092
      KAFKA_TOPIC: stock-prices
    restart: unless-stopped

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      KAFKA_SERVERS: kafka:29092
      KAFKA_TOPIC: stock-prices
      POSTGRES_HOST: postgres
      POSTGRES_DB: stock_data
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      POSTGRES_PORT: 5432
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-admin-token}
      INFLUXDB_ORG: test
      INFLUXDB_BUCKET: test
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      PIPELINE_RESET: ${PIPELINE_RESET:-false}
      INGEST_HISTORICAL: ${INGEST_HISTORICAL:-false}
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: stock_data
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      POSTGRES_PORT: 5432
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-admin-token}
      INFLUXDB_ORG: test
      INFLUXDB_BUCKET: test
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    restart: unless-stopped

volumes:
  postgres_data:
  grafana_data:
